generator client {
  provider      = "prisma-client-js"
  output        = "../prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_APP_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model AccountData {
  profileId          String             @id @unique @db.Uuid
  confirmationStatus ConfirmationStatus @default(NOT_CONFIRM)
  confirmationCode   String
  recoveryCode       String?
  githubId           String?            @unique
  googleId           String?            @unique
  user               User               @relation(fields: [profileId], references: [id])

  @@map("accountData")
}

model User {
  id           String       @id @default(uuid()) @db.Uuid
  name         String       @unique
  email        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  passwordHash String
  banStatus    BanStatus    @default(NOT_BANNED)
  banDate      DateTime?
  accountData  AccountData?
  profile      Profile?

  sessions Session[]

  @@map("user")
}

model Session {
  id             String   @id @default(uuid()) @db.Uuid
  profileId      String   @db.Uuid
  deviceUuid     String   @unique
  deviceName     String
  ip             String
  lastActiveDate DateTime
  user           User     @relation(fields: [profileId], references: [id])

  @@map("session")
}

model Profile {
  profileId   String    @id @unique @db.Uuid
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  country     String?
  city        String?
  aboutMe     String?
  user        User      @relation(fields: [profileId], references: [id])

  @@map("profile")
}

model cities {
  city_id    Int     @id(map: "pk_city_cid")
  country_id Int
  title_ru   String? @db.VarChar(150)

  @@index([country_id])
  @@map("_cities")
}

model countries {
  country_id Int     @id(map: "pk_country_cid")
  title_ru   String? @db.VarChar(60)
  title_en   String? @db.VarChar(60)

  @@map("_countries")
}

enum ConfirmationStatus {
  CONFIRM
  NOT_CONFIRM
}

enum BanStatus {
  BANNED
  NOT_BANNED
}
